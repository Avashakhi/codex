This code provides a basic framework.  **Do not use this code for live trading without extensive testing and modification.**  Live trading involves real financial risk.  This example uses simulated data and lacks crucial features like error handling, order management, and risk management.

This code uses the `yfinance` library to fetch data and `talib` to calculate the RSI.  You'll need to install them: `pip install yfinance talib`

```python
import yfinance as yf
import talib as ta
import pandas as pd

# --- Configuration ---
SYMBOL = "AAPL"  # Stock symbol
PERIOD = "1d"  # Data interval (e.g., '1d' for daily, '60m' for 60-minute)
RSI_PERIOD = 14  # RSI period
OVERSOLD_THRESHOLD = 30  # RSI oversold threshold
OVERBOUGHT_THRESHOLD = 70  # RSI overbought threshold
INITIAL_CAPITAL = 10000  # Starting capital

# --- Data Fetching ---
data = yf.download(SYMBOL, period="60d", interval=PERIOD) # Download 60 days of data


# --- RSI Calculation ---
data["RSI"] = ta.RSI(data["Close"], timeperiod=RSI_PERIOD)

# --- Trading Logic ---
data["Position"] = 0  # Initialize position (0: no position, 1: long, -1: short)
data["Holdings"] = 0 #Initialize Holdings
data["Cash"] = INITIAL_CAPITAL #Initialize cash
data["Shares"] = 0 # Initialize shares


for i in range(1, len(data)):
    if data["RSI"][i-1] > OVERSOLD_THRESHOLD and data["RSI"][i] < OVERSOLD_THRESHOLD and data["Position"][i-1] == 0 and data["Cash"][i-1] > data["Close"][i]: #Buy condition
        #Buy Logic
        shares_to_buy = int(data["Cash"][i-1] / data["Close"][i]) # Calculate how many shares we can buy
        data["Position"][i] = 1
        data["Holdings"][i] = data["Holdings"][i-1] + shares_to_buy * data["Close"][i]
        data["Cash"][i] = data["Cash"][i-1] - shares_to_buy * data["Close"][i]
        data["Shares"][i] = shares_to_buy

    elif data["RSI"][i-1] < OVERBOUGHT_THRESHOLD and data["RSI"][i] > OVERBOUGHT_THRESHOLD and data["Position"][i-1] == 1: #Sell condition
        #Sell Logic
        data["Position"][i] = 0
        data["Cash"][i] = data["Cash"][i-1] + data["Shares"][i-1] * data["Close"][i]
        data["Holdings"][i] = data["Holdings"][i-1] - data["Shares"][i-1] * data["Close"][i]
        data["Shares"][i] = 0

    else:
        data["Position"][i] = data["Position"][i-1] # Hold the current position
        data["Holdings"][i] = data["Holdings"][i-1]
        data["Cash"][i] = data["Cash"][i-1]
        data["Shares"][i] = data["Shares"][i-1]



# --- Backtesting and Results ---
final_value = data["Cash"][-1] + data["Holdings"][-1]
print(f"Final Portfolio Value: ${final_value:.2f}")
print(data[["Close", "RSI", "Position", "Cash", "Holdings", "Shares"]].tail(10)) # show the last 10 days


```

**Explanation:**

1. **Import Libraries:** Imports `yfinance`, `talib`, and `pandas`.
2. **Configuration:** Sets parameters like the stock symbol, data interval, RSI period, overbought/oversold thresholds, and initial capital.  **Adjust these to your strategy.**
3. **Data Fetching:** Downloads historical stock data using `yfinance.download()`.  The `period` and `interval` parameters control the data range and frequency.
4. **RSI Calculation:** Uses `talib.RSI()` to calculate the Relative Strength Index.
5. **Trading Logic:** This is the core of the bot.  It iterates through the data:
   - **Buy Signal:** If the RSI crosses below the `OVERSOLD_THRESHOLD` and there's no existing position, it simulates buying shares.  The number of shares is based on available cash.
   - **Sell Signal:** If the RSI crosses above the `OVERBOUGHT_THRESHOLD` and there's a long position, it simulates selling all shares.
   - **Hold:** Otherwise, it holds the existing position.
6. **Backtesting and Results:** Calculates the final portfolio value after the simulated trades and prints the results.  The `tail(10)` shows the last 10 days of trading activity.


**Crucial Missing Elements (for live trading):**

* **Error Handling:**  The code needs robust error handling to manage network issues, API errors, and other potential problems.
* **Order Management:**  A real trading bot needs to interact with a brokerage API to place and manage orders.  This involves authentication, order placement, order status checking, and potentially handling order cancellations.
* **Risk Management:**  Essential for protecting capital.  This includes stop-loss orders, position sizing, and diversification.
* **Slippage and Commission:** Real trades incur slippage (difference between expected and actual execution price) and commissions.  These need to be factored into the calculations.
* **Transaction Costs:**  Include brokerage fees and taxes.
* **Parameter Optimization:** The thresholds and RSI period should be optimized using techniques like backtesting and walk-forward analysis.
* **Market Data Feed:**  You'll need a reliable real-time market data feed for live trading. `yfinance` is not suitable for real-time data.

This improved example is for educational purposes only.  Thoroughly test any trading strategy using historical data before risking real capital.  Consult with a financial advisor before making any investment decisions.
